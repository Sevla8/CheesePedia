# search by label #############################################################

	# Param : inputLabel
	SELECT ?label ?thumbnail
	WHERE {
		?cheese a dbo:Cheese ;
				dbo:abstract ?abstract ;
				rdfs:label ?label .
		FILTER(
			langMatches(lang(?label),"EN") &&
			langMatches(lang(?abstract),"EN") &&
			REGEX(?abstract ,"cheese", "i") &&
			REGEX(?label, "${input}", "i")
		)
		OPTIONAL {
			?cheese dbo:thumbnail ?thumbnail .
		}
	}
	ORDER BY ASC(?label)

# global search ###############################################################

	# Param : inputLabel, inputCertification, inputCountry, inputTexture, inputSource, inputPasteurized
	SELECT ?label ?thumbnail
	WHERE {
		?cheese a dbo:Cheese ;
				dbo:abstract ?abstract ;
				rdfs:label ?label .
		FILTER(
			langMatches(lang(?label), "EN") &&
			langMatches(lang(?abstract), "EN") &&
			REGEX(?abstract ,"cheese", "i") &&
			REGEX(?label, "${inputLabel}", "i")
		)
		OPTIONAL { # some cheeses have a certification
			?cheese dbp:certification ?certification .
			FILTER(
				REGEX(?certification, "${inputCertification}", "i")
			)
			OPTIONAL {
				?certification rdfs:label ?certification_label .
				FILTER(
					langMatches(lang(?certification_label), "EN") &&
					REGEX(?certification_label, "${inputCertification}", "i")
				)
			}
			BIND(COALESCE(?certification_label, ?certification) AS ?certification0)
		}
		OPTIONAL { # some cheeses have a country
			?cheese dbp:country ?country .
			FILTER(
				REGEX(?country, "${inputCountry}", "i")
			)
			OPTIONAL {
				?country rdfs:label ?country_label .
				FILTER(
					langMatches(lang(?country_label), "EN") &&
					REGEX(?label, "${inputCountry}", "i")
				)
			}
			BIND(COALESCE(?country_label, ?country) AS ?country0)
		}
		OPTIONAL { # some cheeses have a texture
			?cheese dbp:texture ?texture .
			FILTER(
				REGEX(?texture, "${inputTexture}", "i")
			)
			OPTIONAL {
				?texture rdfs:label ?texture_label .
				FILTER(
					langMatches(lang(?texture_label), "EN") &&
					REGEX(?texture_label, "${inputTexture}", "i")
				)
			}
			BIND(COALESCE(?texture_label, ?texture) AS ?texture0)
		}
		OPTIONAL { # some cheeses have a source
			?cheese dbp:source ?source .
			FILTER(
				REGEX(?source, "${inputSource}", "i")
			)
			OPTIONAL {
				?source rdfs:label ?source_label .
				FILTER(
					langMatches(lang(?source_label), "EN") &&
					REGEX(?source_label, "${inputSource}", "i")
				)
			}
			BIND(COALESCE(?source_label, ?source) AS ?source0)
		}
		OPTIONAL { # some cheeses have a pasteurization
			?cheese dbp:pasteurized ?pasteurized .
			FILTER(
				REGEX(?pasteurized, "${inputPasteurized}", "i")
			)
			OPTIONAL {
				?pasteurized rdfs:label ?pasteurized_label .
				FILTER(
					langMatches(lang(?pasteurized_label), "EN") &&
					REGEX(?pasteurized_label, "${inputPasteurized}", "i")
				)
			}
			BIND(COALESCE(?pasteurized_label, ?pasteurized) AS ?pasteurized0)
		}
		OPTIONAL {
			?cheese dbo:thumbnail ?thumbnail .
		}
	}
	GROUP BY ?label ?thumbnail
	ORDER BY ASC(?label)

###############################################################################

	# Param : label
	SELECT ?label ?thumbnail ?country
	GROUP_CONCAT(DISTINCT ?texture; SEPARATOR=", ") as ?textures
	GROUP_CONCAT(DISTINCT ?s; SEPARATOR=", ") AS ?sources
	GROUP_CONCAT(DISTINCT ?certification; SEPARATOR="|") as ?certifications
	GROUP_CONCAT(DISTINCT ?pasteurized; SEPARATOR="|") as ?pasteurizeds
	GROUP_CONCAT(DISTINCT ?aging; SEPARATOR="|") as ?agings
	WHERE { # we don't accept cheeses without label, name, thumbnail, country or abstract
		?cheese a dbo:Cheese ;
				rdfs:label ?label ;
				dbo:thumbnail ?thumbnail ;
				dbp:country ?country0 ;
				dbo:abstract ?abstract .
		FILTER(
			langMatches(lang(?label), "EN") &&
			langMatches(lang(?abstract), "EN") &&
			xsd:string(?label) = "${label}" &&
			REGEX(?abstract ,"cheese", "i")
		)
		optional { # somecountries are dbo:Country, some others are xsd:string
			?country0 rdfs:label ?country_label .
			FILTER(langMatches(lang(?country_label), "EN"))
		}
		BIND(COALESCE(?country_label, ?country0) AS ?country)
		optional { # some cheeses don't have a source informed
			?cheese dbp:source ?source .
			optional { # some sources are dbo:Animal (or else), some others are xsd:string
				?source rdfs:label ?source_label .
				FILTER(langMatches(lang(?source_label), "EN"))
			}
			BIND(COALESCE(?source_label, ?source) AS ?s)
		}
		optional { # some cheeses don't have a texture informed
			?cheese dbp:texture ?texture .
			FILTER(langMatches(lang(?texture), "EN"))
		}
		optional { # some cheeses don't have an aging informed
			?cheese dbp:aging ?aging .
			FILTER(langMatches(lang(?aging), "EN"))
		}
		optional { # some cheeses don't have a certification informed
			?cheese dbp:certification ?certification .
			FILTER(langMatches(lang(?certification), "EN"))
		}
		optional {
			?cheese dbp:pasteurized ?pasteurized .
			FILTER(langMatches(lang(?pasteurized), "EN"))
		}
	}
	ORDER BY ASC(?label)
--------------------------------------------------------------------- details d'un fromage
	select ?f ?a ?n ?thumbnail  sum(if(regex(?c,"A.*O.*C"),1,0)) as ?AOC
              sum(if(regex(?c,"AOP"),1,0)) as ?AOP
              sum(if(regex(?c,"P.*D.*O"),1,0)) as ?PDO
              sum(if(regex(?c,"D.*O.*C"),1,0)) as ?DOC
              sum(if(regex(?t,"([Ss]emi|[Mm]edium).?[Ff]irm"),1,0)) as ?SFirm
              sum(if(regex(?t,"([Ss]emi|[Mm]edium).?[Ha]ard"),1,0)) as ?SHard
             sum(if(regex(?t,"([Ss]emi|[Mm]edium).?[Ss]oft"),1,0)) as ?SSoft
              sum(if(regex(?t,"[Ff]irm"),1,0))-sum(if(regex(?t,"([Ss]emi|[Mm]edium).?[Ff]irm"),1,0)) as ?Firm
              sum(if(regex(?t,"[Ss]oft"),1,0))-sum(if(regex(?t,"([Ss]emi|[Mm]edium).?[Ss]oft"),1,0)) as ?Soft
              sum(if(regex(?t,"[Hh]ard"),1,0))-sum(if(regex(?t,"([Ss]emi|[Mm]edium).?[Hh]ard"),1,0)) as ?Hard
             sum(if(regex(?t,"[Cc]rumbly"),1,0)) as ?Crumbly
             sum(if(regex(?t,"[Cc]ream"),1,0)) as ?Creamy
             sum(if(regex(?t,"[Dd]ense"),1,0)) as ?Dense
             sum(if(regex(?t,"[Cc]ompact"),1,0)) as ?Compact
             sum(if(regex(?t,"[Gg]ranular"),1,0)) as ?Granular
             sum(if(regex(?t,"[Mm]oist"),1,0)) as ?Moist
             sum(if(regex(?t,"[Ee]lastic"),1,0)) as ?Elastic
             sum(if(regex(?t,"[Ss]tringy"),1,0)) as ?Stringy
             sum(if(regex(?t,"[Ss]mooth"),1,0)) as ?Smooth
             sum(if(regex(?s,"[Gg]oat"),1,0)) as ?Goat
             sum(if(regex(?s,"[Cc]ow|[Cc]attle"),1,0)) as ?Cow
             sum(if(regex(?s,"[Ss]heep|[Ee]we"),1,0)) as ?Sheep
             sum(if(regex(?s,"[Bb]uffalo|[Cc]arabao"),1,0)) as ?Buffalo
             sum(if(regex(?s,"[Dd]onkey"),1,0)) as ?Donkeys
             sum(if(regex(?s,"[Yy]ak"),1,0)) as ?Yak
             sum(if(regex(?s,"[Mm]oose"),1,0)) as ?Moose
             sum(if(regex(?p,"([Yy]es|[Oo]ften|[Ff]requently|[Pp]ossibly|[Dd]epends)"),1,0))+sum(if(regex(?p2,"([Yy]es|[Oo]ften|[Ff]requently|[Pp]ossibly|[Dd]epends)"),1,0)) as ?Pasteurized

             where {
?f a dbo:Cheese.
?f dbo:abstract ?a.
?f rdfs:label ?n.
OPTIONAL{?f dbp:certification ?c.}
OPTIONAL{?f dbp:pasteurised ?p}.
OPTIONAL{?f dbp:pasteurized ?p2}.
OPTIONAL{?f dbp:source ?s}.
OPTIONAL{?f dbp:texture ?t}.
OPTIONAL {?f dbo:thumbnail ?thumbnail}.


FILTER(langMatches(lang(?n),"EN") && langMatches(lang(?a),"EN") && REGEX(?a ,"[Cc]heese") && ?n=${inputLabel}).
}
GROUP BY ?f ?a ?n ?thumbnail
------------------------------------------ liste pays d'un fromage
	select distinct ?c ?cn 
				where {
	?f a dbo:Cheese.
	?f dbo:abstract ?a.
	?f rdfs:label ?n.
	
        {
        {?f dbo:country ?c}UNION
	{?f dbp:country ?c}
	?c rdfs:label ?cn.
        FILTER(langMatches(lang(?cn),"EN"))
        }UNION{
        {?f dbo:country ?c}UNION
	{?f dbp:country ?c}
        FILTER(langMatches(lang(?c),"EN"))
        }
	FILTER(langMatches(lang(?n),"EN") && langMatches(lang(?a),"EN") && REGEX(?a ,"[Cc]heese") && ?n="Paneer"@en).
	}



------------------------------------------- plats par fromage
select distinct ?rn ?thumbnail
             where {
?f a dbo:Cheese.
?f dbo:abstract ?a.
?f rdfs:label ?n.
?r dbo:ingredient ?f.
?r rdfs:label ?rn
OPTIONAL {?r dbo:thumbnail ?thumbnail}.
FILTER(langMatches(lang(?n),"EN") && langMatches(lang(?rn),"EN") && langMatches(lang(?a),"EN") && REGEX(?a ,"[Cc]heese") && ?n="Paneer"@en).
}



=============================================alternative

--------------------------------------------details d'un fromage

SELECT * WHERE
{ 
{
     select ?f ?a ?n ?thumbnail  sum(if(regex(?c,"A.*O.*C"),1,0)) as ?AOC
              sum(if(regex(?c,"AOP"),1,0)) as ?AOP
              sum(if(regex(?c,"P.*D.*O"),1,0)) as ?PDO
              sum(if(regex(?c,"D.*O.*C"),1,0)) as ?DOC
              sum(if(regex(?t,"([Ss]emi|[Mm]edium).?[Ff]irm"),1,0)) as ?SFirm
              sum(if(regex(?t,"([Ss]emi|[Mm]edium).?[Ha]ard"),1,0)) as ?SHard
             sum(if(regex(?t,"([Ss]emi|[Mm]edium).?[Ss]oft"),1,0)) as ?SSoft
              sum(if(regex(?t,"[Ff]irm"),1,0))-sum(if(regex(?t,"([Ss]emi|[Mm]edium).?[Ff]irm"),1,0)) as ?Firm
              sum(if(regex(?t,"[Ss]oft"),1,0))-sum(if(regex(?t,"([Ss]emi|[Mm]edium).?[Ss]oft"),1,0)) as ?Soft
              sum(if(regex(?t,"[Hh]ard"),1,0))-sum(if(regex(?t,"([Ss]emi|[Mm]edium).?[Hh]ard"),1,0)) as ?Hard
             sum(if(regex(?t,"[Cc]rumbly"),1,0)) as ?Crumbly
             sum(if(regex(?t,"[Cc]ream"),1,0)) as ?Creamy
             sum(if(regex(?t,"[Dd]ense"),1,0)) as ?Dense
             sum(if(regex(?t,"[Cc]ompact"),1,0)) as ?Compact
             sum(if(regex(?t,"[Gg]ranular"),1,0)) as ?Granular
             sum(if(regex(?t,"[Mm]oist"),1,0)) as ?Moist
             sum(if(regex(?t,"[Ee]lastic"),1,0)) as ?Elastic
             sum(if(regex(?t,"[Ss]tringy"),1,0)) as ?Stringy
             sum(if(regex(?t,"[Ss]mooth"),1,0)) as ?Smooth
             sum(if(regex(?s,"[Gg]oat"),1,0)) as ?Goat
             sum(if(regex(?s,"[Cc]ow|[Cc]attle"),1,0)) as ?Cow
             sum(if(regex(?s,"[Ss]heep|[Ee]we"),1,0)) as ?Sheep
             sum(if(regex(?s,"[Bb]uffalo|[Cc]arabao"),1,0)) as ?Buffalo
             sum(if(regex(?s,"[Dd]onkey"),1,0)) as ?Donkeys
             sum(if(regex(?s,"[Yy]ak"),1,0)) as ?Yak
             sum(if(regex(?s,"[Mm]oose"),1,0)) as ?Moose
             sum(if(regex(?p,"([Yy]es|[Oo]ften|[Ff]requently|[Pp]ossibly|[Dd]epends)"),1,0))+sum(if(regex(?p2,"([Yy]es|[Oo]ften|[Ff]requently|[Pp]ossibly|[Dd]epends)"),1,0)) as ?Pasteurized

             where {
?f a dbo:Cheese.
?f dbo:abstract ?a.
?f rdfs:label ?n.
OPTIONAL{?f dbp:certification ?c.}
OPTIONAL{?f dbp:pasteurised ?p}.
OPTIONAL{?f dbp:pasteurized ?p2}.
OPTIONAL{?f dbp:source ?s}.
OPTIONAL{?f dbp:texture ?t}.
OPTIONAL {?f dbo:thumbnail ?thumbnail}.


FILTER(langMatches(lang(?n),"EN") && langMatches(lang(?a),"EN") && REGEX(?a ,"[Cc]heese") && ?n=${input}).
}
GROUP BY ?f ?a ?n ?thumbnail
          
}
UNION
{
select distinct ?2rn ?2thumbnail
             where {
?2f a dbo:Cheese.
?2f dbo:abstract ?2a.
?2f rdfs:label ?2n.
?2r dbo:ingredient ?2f.
?2r rdfs:label ?2rn
OPTIONAL {?2r dbo:thumbnail ?2thumbnail}.
FILTER(langMatches(lang(?2n),"EN") && langMatches(lang(?2rn),"EN") && langMatches(lang(?2a),"EN") && REGEX(?2a ,"[Cc]heese") && ?2n=${input}).
}
}
UNION
{
select distinct ?3cn
				where {
	?3f a dbo:Cheese.
	?3f dbo:abstract ?3a.
	?3f rdfs:label ?3n.
	{?3f dbo:country ?3c}UNION
	{?3f dbp:country ?3c}
	?3c rdfs:label ?3cn.

	FILTER(langMatches(lang(?3n),"EN") && langMatches(lang(?3a),"EN")  && langMatches(lang(?3cn),"EN") && REGEX(?3a ,"[Cc]heese") && ?3n=${input} ).
	}

}
}


------------------------ liste pays avec des fromages

select distinct ?cn 
             where {
?c a dbo:Country.
?f a dbo:Cheese.
?f dbo:abstract ?a. 
?f rdfs:label ?n.
?c rdfs:label ?cn.
{
?f dbp:country ?c.
}UNION{
?f dbp:country ?cn.
}
FILTER(langMatches(lang(?cn),"EN") &&langMatches(lang(?n),"EN") && langMatches(lang(?a),"EN") && REGEX(?a ,"[Cc]heese") ).
}


------------------------- details pays
select distinct ?cn ?t ?d ?capitalname 
             where {
?c a dbo:Country.
?c rdfs:label ?cn.
?c rdfs:comment ?d.
?c dbp:capital ?capital.
?capital rdfs:label ?capitalname.
OPTIONAL{?c dbo:thumbnail ?t}.
FILTER(langMatches(lang(?cn),"EN")  &&  langMatches(lang(?d),"EN") && langMatches(lang(?capitalname),"EN") && ?cn="Poland"@en ).
}

-------------------------------liste fromages par pays

select distinct ?n ?t
             where {
?c a dbo:Country.
?f a dbo:Cheese.
?f dbo:abstract ?a. 
?f rdfs:label ?n.
?c rdfs:label ?cn.
{
?f dbp:country ?c.
}UNION{
?f dbp:country ?cn.
}
OPTIONAL {?f dbo:thumbnail ?t}
FILTER(langMatches(lang(?cn),"EN") &&langMatches(lang(?n),"EN") && langMatches(lang(?a),"EN") && REGEX(?a ,"[Cc]heese") && ?cn="France"@en ).
}


------------------------- requete pour un animal

Valeurs possible de input: Cattle | Water_buffalo | Goat | Sheep | Donkey | Yak | Moose

select ?label, ?abstract, ?thumbnail
where{
	dbr:${input} rdfs:label ?label;
	dbo:abstract ?abstract;
	dbo:thumbnail ?thumbnail.
	FILTER(
		langMatches(lang(?abstract),"EN") &&
		langMatches(lang(?label),"EN")
	)
}


----------------------------------fromages similaires :
- remplacer inputPays par le pays, et les inputs textures par les textures
- ca donne une liste de pays similaires, prendre 3 randoms 

select distinct ?n ?thumbnail
             where {
?f a dbo:Cheese.
?f dbo:abstract ?a. 
OPTIONAL{?f dbo:thumbnail ?thumbnail.}
?f rdfs:label ?n.
{
?f dbp:country ?c.
}UNION{
?f dbo:country ?c.

}
?f dbp:texture ?t.
?c rdfs:label ?cn.
FILTER(langMatches(lang(?n),"EN") && langMatches(lang(?a),"EN") && REGEX(?a ,"[Cc]heese") && ?cn=${inputPays} && REGEX(?t,${inputTexture},"i") && REGEX(?t,${inputTexture2},"i") ).
}

--------------------------------page details d'une recette :
-remplacer ${input} par le nom du pays
- les champs if correspondent aux ingredients fromagés, donc il faut des hyper liens vers les pages de fromage
- les champs inf correspondent aux ingredients non fromagés


SELECT * WHERE
{ 
{
     select distinct ?rn ?thumbnail ?cn ?an 
             where {
                  ?r dbo:ingredient [].
                  ?r rdfs:label ?rn.
                  
                  {
                  ?r dbp:country ?c.
                  ?c rdfs:label ?cn.
                  FILTER(langMatches(lang(?cn),"EN") ).
                  }UNION{
                  ?r dbp:country ?cn.
                  FILTER(langMatches(lang(?cn),"EN") ).
                  }
                  OPTIONAL {?r dbo:thumbnail ?thumbnail}.
                  FILTER( langMatches(lang(?rn),"EN") && ?rn=${input} ).
                 ?r dbo:abstract ?an.
                 FILTER(langMatches(lang(?an),"EN")).
          }
}
UNION
{
select distinct ?n
             where {
                  ?if a dbo:Cheese.
                   ?if dbo:abstract ?a.
                   ?if rdfs:label ?n.
                   ?2r dbo:ingredient ?if.
                   ?2r rdfs:label ?2rn.
                   FILTER(langMatches(lang(?n),"EN") && langMatches(lang(?2rn),"EN") &&  langMatches(lang(?a),"EN") && 
                  REGEX(?a ,"[Cc]heese") && ?2rn=${input}).
            }
}
UNION
{
select distinct ?infn
             where {
                   ?3r dbo:ingredient ?inf.
                   ?inf rdfs:label ?infn.
                   ?3r rdfs:label ?3rn.
                   filter not exists { ?inf rdf:type dbo:Cheese }
                   FILTER(langMatches(lang(?infn),"EN") && langMatches(lang(?3rn),"EN") &&  ?3rn=${input}).
            }
}
}

