# Param : inputLabel,
SELECT ?label ?thumbnail
WHERE {
	?cheese a dbo:Cheese ;
			dbo:abstract ?abstract ;
			rdfs:label ?label .
	FILTER(
		langMatches(lang(?label),"EN") &&
		langMatches(lang(?abstract),"EN") &&
		REGEX(?abstract ,"cheese", "i") &&
		REGEX(?label, "${input}", "i")
	)
	OPTIONAL {
		?cheese dbo:thumbnail ?thumbnail .
	}
}
ORDER BY ASC(?label)
----------------------------------------------------------------------------

# Param : inputLabel, inputCountry
SELECT ?label ?thumbnail ?country
WHERE {
	?cheese a dbo:Cheese ;
			dbo:abstract ?abstract ;
			dbp:country ?country0 ;
			rdfs:label ?label .
	FILTER(
		langMatches(lang(?label),"EN") &&
		langMatches(lang(?abstract),"EN") &&
		REGEX(?abstract ,"cheese", "i") &&
		REGEX(?label, "${inputLabel}", "i") &&
		REGEX(?country0, "${inputCountry}", "i")
	)
	OPTIONAL {
		?cheese dbo:thumbnail ?thumbnail .
	}
	OPTIONAL {
		?country0 rdfs:label ?country_label .
		FILTER(
			langMatches(lang(?country_label), "EN") &&
			REGEX(?country_label, "${inputCountry}", "i")
		)
	}
	BIND(COALESCE(?country_label, ?country0) AS ?country)
}
ORDER BY ASC(?label)

# Param : label
SELECT ?label ?thumbnail ?country
GROUP_CONCAT(DISTINCT ?texture; SEPARATOR=", ") as ?textures
GROUP_CONCAT(DISTINCT ?s; SEPARATOR=", ") AS ?sources
GROUP_CONCAT(DISTINCT ?certification; SEPARATOR="|") as ?certifications
GROUP_CONCAT(DISTINCT ?pasteurized; SEPARATOR="|") as ?pasteurizeds
GROUP_CONCAT(DISTINCT ?aging; SEPARATOR="|") as ?agings
WHERE { # we don't accept cheeses without label, name, thumbnail, country or abstract
	?cheese a dbo:Cheese ;
			rdfs:label ?label ;
			dbo:thumbnail ?thumbnail ;
			dbp:country ?country0 ;
			dbo:abstract ?abstract .
	FILTER(
		langMatches(lang(?label), "EN") &&
		langMatches(lang(?abstract), "EN") &&
		xsd:string(?label) = "${label}" &&
		REGEX(?abstract ,"cheese", "i")
	)
	optional { # somecountries are dbo:Country, some others are xsd:string
		?country0 rdfs:label ?country_label .
		FILTER(langMatches(lang(?country_label), "EN"))
	}
	BIND(COALESCE(?country_label, ?country0) AS ?country)
	optional { # some cheeses don't have a source informed
		?cheese dbp:source ?source .
		optional { # some sources are dbo:Animal (or else), some others are xsd:string
			?source rdfs:label ?source_label .
			FILTER(langMatches(lang(?source_label), "EN"))
		}
		BIND(COALESCE(?source_label, ?source) AS ?s)
	}
	optional { # some cheeses don't have a texture informed
		?cheese dbp:texture ?texture .
		FILTER(langMatches(lang(?texture), "EN"))
	}
	optional { # some cheeses don't have an aging informed
		?cheese dbp:aging ?aging .
		FILTER(langMatches(lang(?aging), "EN"))
	}
	optional { # some cheeses don't have a certification informed
		?cheese dbp:certification ?certification .
		FILTER(langMatches(lang(?certification), "EN"))
	}
	optional {
		?cheese dbp:pasteurized ?pasteurized .
		FILTER(langMatches(lang(?pasteurized), "EN"))
	}
}
ORDER BY ASC(?label)

---------------------------------------------------------------------
#Param : Label
select ?f  sum(if(regex(?c,"A.*O.*C"),1,0)) as ?AOC 
              sum(if(regex(?c,"AOP"),1,0)) as ?AOP
              sum(if(regex(?c,"P.*D.*O"),1,0)) as ?PDO 
              sum(if(regex(?c,"D.*O.*C"),1,0)) as ?DOC 
              sum(if(regex(?t,"([Ss]emi|[Mm]edium).?[Ff]irm"),1,0)) as ?SFirm 
              sum(if(regex(?t,"([Ss]emi|[Mm]edium).?[Ha]ard"),1,0)) as ?SHard
             sum(if(regex(?t,"([Ss]emi|[Mm]edium).?[Ss]oft"),1,0)) as ?SSoft
              sum(if(regex(?t,"[Ff]irm"),1,0))-sum(if(regex(?t,"([Ss]emi|[Mm]edium).?[Ff]irm"),1,0)) as ?Firm
              sum(if(regex(?t,"[Ss]oft"),1,0))-sum(if(regex(?t,"([Ss]emi|[Mm]edium).?[Ss]oft"),1,0)) as ?Soft
              sum(if(regex(?t,"[Hh]ard"),1,0))-sum(if(regex(?t,"([Ss]emi|[Mm]edium).?[Hh]ard"),1,0)) as ?Hard
             sum(if(regex(?t,"[Cc]rumbly"),1,0)) as ?Crumbly
             sum(if(regex(?t,"[Cc]ream"),1,0)) as ?Creamy
             sum(if(regex(?t,"[Dd]ense"),1,0)) as ?Dense
             sum(if(regex(?t,"[Cc]ompact"),1,0)) as ?Compact
             sum(if(regex(?t,"[Gg]ranular"),1,0)) as ?Granular
             sum(if(regex(?t,"[Mm]oist"),1,0)) as ?Moist
             sum(if(regex(?t,"[Ee]lastic"),1,0)) as ?Elastic
             sum(if(regex(?t,"[Ss]tringy"),1,0)) as ?Stringy
             sum(if(regex(?t,"[Ss]mooth"),1,0)) as ?Smooth
             sum(if(regex(?s,"[Gg]oat"),1,0)) as ?Goat
             sum(if(regex(?s,"[Cc]ow|[Cc]attle"),1,0)) as ?Cow
             sum(if(regex(?s,"[Ss]heep|[Ee]we"),1,0)) as ?Sheep
             sum(if(regex(?s,"[Bb]uffalo|[Cc]arabao"),1,0)) as ?Buffalo
             sum(if(regex(?s,"[Dd]onkey"),1,0)) as ?Donkeys
             sum(if(regex(?s,"[Yy]ak"),1,0)) as ?Yak
             sum(if(regex(?s,"[Mm]oose"),1,0)) as ?Moose
             sum(if(regex(?p,"([Yy]es|[Oo]ften|[Ff]requently|[Pp]ossibly|[Dd]epends)"),1,0))+sum(if(regex(?p2,"([Yy]es|[Oo]ften|[Ff]requently|[Pp]ossibly|[Dd]epends)"),1,0)) as ?Pasteurized

             where {
?f a dbo:Cheese.
?f dbo:abstract ?a. 
?f rdfs:label ?n.
OPTIONAL{?f dbp:aging	?a}.
OPTIONAL{?f dbp:certification ?c.}
OPTIONAL{?f dbp:pasteurised ?p}.
OPTIONAL{?f dbp:pasteurized ?p2}.

OPTIONAL{?f dbp:source ?s}.
OPTIONAL{?f dbp:texture ?t}.


FILTER(langMatches(lang(?n),"EN") && langMatches(lang(?a),"EN") && REGEX(?a ,"[Cc]heese") && ?n="${label}").
}
GROUP BY ?f 



------------------------------------------

select distinct ?c
             where {
?f a dbo:Cheese.
?f dbo:abstract ?a. 
?f rdfs:label ?n.
{?f dbo:country ?c}UNION
{?f dbp:country ?c}
FILTER(langMatches(lang(?n),"EN") && langMatches(lang(?a),"EN") && REGEX(?a ,"[Cc]heese") && ?n="Fromage blanc"@en).
}
